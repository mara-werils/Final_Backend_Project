<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</title>
  <link rel="stylesheet" href="/css/dashboard.css">
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&display=swap" rel="stylesheet">
</head>
<body>

  <nav class="navbar">
    <a href="/" class="nav-link">üè† –ì–ª–∞–≤–Ω–∞—è</a>
    <a href="/dashboard" class="nav-link">üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</a>
    <button id="logoutButton" class="logout-btn">üö™ –í—ã–π—Ç–∏</button>
  </nav>

  <div class="container">
    <h2 id="welcomeMessage">–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</h2>

    <!-- –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ -->
    <div id="adminPanel" style="display: none; background: #ffeb3b; padding: 10px; border-radius: 8px; margin-bottom: 15px;">
        <h3>‚ö° –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</h3>
        <p>–í—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∞–º–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.</p>
    </div>

    <h3>üìå –ú–æ–∏ –∑–∞–¥–∞—á–∏</h3>

    <ul id="taskList" class="task-list"></ul>

    <form id="taskForm" class="task-form">
      <input type="text" id="taskTitle" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏" required>
      <input type="date" id="taskDueDate" required>
      <button type="submit">‚ûï –î–æ–±–∞–≤–∏—Ç—å</button>
    </form>
  </div>
  
  <script>
    document.addEventListener("DOMContentLoaded", async () => {
      const taskList = document.querySelector("#taskList");
      const taskForm = document.querySelector("#taskForm");
      const taskTitleInput = document.querySelector("#taskTitle");
      const taskDueDateInput = document.querySelector("#taskDueDate");
      const logoutButton = document.querySelector("#logoutButton");
      const welcomeMessage = document.querySelector("#welcomeMessage");
      const adminPanel = document.querySelector("#adminPanel");
      const token = localStorage.getItem("token");

      if (!token) {
        alert("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞.");
        window.location.href = "/login";
        return;
      }

      async function checkAuth() {
        try {
          const response = await fetch("/users/profile", {
            headers: { "Authorization": `Bearer ${token}` }
          });

          if (!response.ok) {
            throw new Error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");
          }

          const user = await response.json();
          console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:", user);
          welcomeMessage.innerText = `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${user.username} (${user.role})!`;

          if (user.role === "admin") {
            adminPanel.style.display = "block";
          }
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", error);
          alert(error.message);
          localStorage.removeItem("token");
          window.location.href = "/login";
        }
      }

      async function fetchTasks() {
        try {
          const response = await fetch("/resource", {
            headers: { "Authorization": `Bearer ${token}` }
          });

          if (!response.ok) {
            throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á");
          }

          const tasks = await response.json();
          console.log("‚úÖ –ó–∞–¥–∞—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:", tasks);
          taskList.innerHTML = "";

          tasks.forEach(task => {
            const dueDateStr = task.dueDate
              ? new Date(task.dueDate).toLocaleDateString()
              : "–ë–µ–∑ —Å—Ä–æ–∫–∞";

            const li = document.createElement("li");
            li.classList.add("task-item");
            li.innerHTML = `
              <div class="task-info">
                <span class="task-title">${task.title}</span>
                <span class="task-date">üóì ${dueDateStr}</span>
              </div>
              <div class="task-actions">
                <select class="task-status" data-id="${task._id}">
                  <option value="pending" ${task.status === "pending" ? "selected" : ""}>–í –æ–∂–∏–¥–∞–Ω–∏–∏</option>
                  <option value="in-progress" ${task.status === "in-progress" ? "selected" : ""}>–í –ø—Ä–æ—Ü–µ—Å—Å–µ</option>
                  <option value="completed" ${task.status === "completed" ? "selected" : ""}>–ó–∞–≤–µ—Ä—à–µ–Ω–æ</option>
                </select>
                <button class="delete-btn" data-id="${task._id}">üóë –£–¥–∞–ª–∏—Ç—å</button>
              </div>
            `;
            taskList.appendChild(li);
          });

          document.querySelectorAll(".delete-btn").forEach(button => {
            button.addEventListener("click", async (e) => {
              const taskId = e.target.dataset.id;
              await deleteTask(taskId);
            });
          });

          document.querySelectorAll(".task-status").forEach(select => {
            select.addEventListener("change", async (e) => {
              const taskId = e.target.dataset.id;
              const newStatus = e.target.value;
              await updateTaskStatus(taskId, newStatus);
            });
          });

        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á:", error);
          alert(error.message);
        }
      }

      async function addTask(title, dueDate) {
        try {
          if (!title.trim()) {
            alert("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏");
            return;
          }

          const response = await fetch("/resource", {
            method: "POST",
            headers: {
              "Authorization": `Bearer ${token}`,
              "Content-Type": "application/json"
            },
            body: JSON.stringify({ title, dueDate })
          });

          if (!response.ok) {
            throw new Error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏");
          }

          fetchTasks();
          taskTitleInput.value = "";
          taskDueDateInput.value = "";
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:", error);
          alert(error.message);
        }
      }

      async function deleteTask(taskId) {
        try {
          const response = await fetch(`/resource/${taskId}`, {
            method: "DELETE",
            headers: { "Authorization": `Bearer ${token}` }
          });

          if (!response.ok) {
            throw new Error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏");
          }

          fetchTasks();
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:", error);
          alert(error.message);
        }
      }

      async function updateTaskStatus(taskId, status) {
        try {
          const response = await fetch(`/resource/${taskId}`, {
            method: "PUT",
            headers: {
              "Authorization": `Bearer ${token}`,
              "Content-Type": "application/json"
            },
            body: JSON.stringify({ status })
          });

          if (!response.ok) {
            throw new Error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏");
          }

          console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ ${taskId} –æ–±–Ω–æ–≤–ª–µ–Ω: ${status}`);
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏:", error);
          alert(error.message);
        }
      }

      function logout() {
        localStorage.removeItem("token");
        alert("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã");
        window.location.href = "/login";
      }

      taskForm.addEventListener("submit", async (e) => {
        e.preventDefault();
        await addTask(taskTitleInput.value, taskDueDateInput.value);
      });

      logoutButton.addEventListener("click", logout);

      await checkAuth();
      fetchTasks();
    });
  </script>
</body>
</html>
