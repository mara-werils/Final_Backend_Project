const Resource = require("../models/Resource");

// üìå –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ (–∑–∞–¥–∞—á–∏)
exports.createResource = async (req, res) => {
    try {
        const { title, dueDate } = req.body;

        if (!title) {
            return res.status(400).json({ error: "–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ" });
        }

        let formattedDueDate = null;
        if (dueDate) {
            const parsedDate = new Date(dueDate);
            if (isNaN(parsedDate.getTime())) {
                return res.status(400).json({ error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã" });
            }
            formattedDueDate = parsedDate;
        }

        const resource = new Resource({
            title,
            dueDate: formattedDueDate,
            user: req.user.id
        });

        await resource.save();
        res.status(201).json(resource);
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞:", err);
        res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
};

// üìå –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ (—Å —É—á–µ—Ç–æ–º —Ä–æ–ª–µ–π)
exports.getResources = async (req, res) => {
    try {
        let query = {};

        // ‚úÖ –ê–¥–º–∏–Ω –ø–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏
        if (req.user.role !== "admin") {
            query.user = req.user.id;
        }

        const resources = await Resource.find(query).populate("user", "username email");
        res.json(resources);
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤:", err);
        res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
};

// üìå –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞ –ø–æ ID (—É—á–µ—Ç —Ä–æ–ª–µ–π)
exports.getResourceById = async (req, res) => {
    try {
        const resource = await Resource.findById(req.params.id).populate("user", "username email");

        if (!resource) {
            return res.status(404).json({ error: "–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }

        // ‚úÖ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –∏–ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∑–∞–¥–∞—á—É
        if (req.user.role !== "admin" && resource.user._id.toString() !== req.user.id) {
            return res.status(403).json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω" });
        }

        res.json(resource);
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞ –ø–æ ID:", err);
        res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
};

// üìå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –∏–ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü)
exports.updateResource = async (req, res) => {
    try {
        const { title, status, dueDate } = req.body;

        if (!title && !status && !dueDate) {
            return res.status(400).json({ error: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–¥–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –ø–æ–ª–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è" });
        }

        const validStatuses = ["pending", "in-progress", "completed"];
        if (status && !validStatuses.includes(status)) {
            return res.status(400).json({ error: "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏" });
        }

        let formattedDueDate = null;
        if (dueDate) {
            const parsedDate = new Date(dueDate);
            if (isNaN(parsedDate.getTime())) {
                return res.status(400).json({ error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã" });
            }
            formattedDueDate = parsedDate;
        }

        const updatedResource = await Resource.findById(req.params.id);

        if (!updatedResource) {
            return res.status(404).json({ error: "–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }

        // ‚úÖ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –∏–ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–≥—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å –∑–∞–¥–∞—á—É
        if (req.user.role !== "admin" && updatedResource.user.toString() !== req.user.id) {
            return res.status(403).json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω" });
        }

        updatedResource.title = title || updatedResource.title;
        updatedResource.status = status || updatedResource.status;
        updatedResource.dueDate = formattedDueDate || updatedResource.dueDate;

        await updatedResource.save();

        res.json(updatedResource);
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞:", err);
        res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
};

// üìå –£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –∏–ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü)
exports.deleteResource = async (req, res) => {
    try {
        const resource = await Resource.findById(req.params.id);

        if (!resource) {
            return res.status(404).json({ error: "–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }

        // ‚úÖ –ê–¥–º–∏–Ω –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å –ª—é–±—É—é –∑–∞–¥–∞—á—É, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî —Ç–æ–ª—å–∫–æ —Å–≤–æ—é
        if (req.user.role !== "admin" && resource.user.toString() !== req.user.id) {
            return res.status(403).json({ error: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω" });
        }

        await Resource.findByIdAndDelete(req.params.id);
        res.json({ message: "–†–µ—Å—É—Ä—Å —É–¥–∞–ª–µ–Ω" });
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞:", err);
        res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
};
